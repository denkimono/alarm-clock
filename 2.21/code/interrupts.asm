; Copyright (c) 2007 Mark Longstaff-Tyrrell All Rights Reserved.
; DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
;
; This code is free software; you can redistribute it and/or modify it
; under the terms of the GNU General Public License version 3 only, as
; published by the Free Software Foundation.
;
;  This code is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this work.  If not, see <http://www.gnu.org/licenses/>.



;***********************
; ISR

INT
	; save system status
	MOVWF	W_TEMP		; Copy W to TEMP register,
	MOVFW	STATUS	; status to be saved into W
	MOVWF	STATUS_TEMP	; Save status to STATUS_TEMP register
	CLRF	STATUS
	MOVFF	IFSR,FSR
	MOVFF	ID_MOD,D_MOD
	MOVFF	ID_NUM,D_NUM
	MOVFF	ID_DIV,D_DIV

	; TIMER 2 interrupt (HANDLE SOUNDS)
	CALL	TIMER2_INTERRUPT

	; multiplexer interrupt
	BTFSC	INTCON,T0IF
	CALL	MPX_INTERRUPT

	; restore system status
	MOVFF	D_MOD,ID_MOD
	MOVFF	D_NUM,ID_NUM
	MOVFF	D_DIV,ID_DIV
	MOVFF	FSR,IFSR
	MOVF	STATUS_TEMP,W
	MOVWF	STATUS		; Move W into STATUS register
	MOVF	W_TEMP,W

	RETFIE

;***********************

ITICKS
	; RESET TICK COUNTER
	MOVLF	SUBTICKS,SUBTICK_COUNT

	; NOW DEAL WITH 100Hz EVENTS
	CALL SCAN_KEYBOARD

	CASE CD_MODE,CD_RUNNING
	CALL UPDATE_COUNTDOWN

	; FORCE FOREGROUND PROCESS TO UPDATE THE DISPLAY
	BSF	TICKS,DISPLAY_INT

	; UPDATE 1/10 SECONDS COUNTER
	DECF	ITSECOND,F
	BTFSC	STATUS,Z
	CALL	ITSECONDS

	RETURN

ITSECONDS
	; RESET 1/10 SECONDS COUNTER
	MOVLF	ITSECOND,TSECOND_COUNT

	; DEAL WITH 10Hz EVENTS

	; UPDATE HALF SECONDS COUNTER
	DECF	IHSECOND,F
	BTFSC	STATUS,Z
	CALL	IHSECONDS

	RETURN

IHSECONDS

	; RESET HALF SECONDS COUNTER
	MOVLF	IHSECOND,HSECOND_COUNT

	; NOW DEAL WITH 0.5Hz EVENTS

	; FLIP THE HALF SECOND TICK
	MOVFW	TICKS
	XORLW	0X02
	MOVWF	TICKS

	; INC KEYPRESS TIMER
	INCF KEY_COUNT,F

	; UPDATE SECONDS COUNTER
	DECF	ISECOND,F
	BTFSC	STATUS,Z
	CALL	ISECONDS

	RETURN

ISECONDS

	; RESET SECONDS COUNTER
	MOVLF	ISECOND,SECOUND_COUNT

	; NOW DEAL WITH 1Hz EVENTS
	CALL UPDATE_CLOCK

	CALL MOMENTARILY_SHOW_CLOCK

	RETURN

TIMER2_INTERRUPT

	; BUZZER OFF
	BUZZER_OFF

	; TOGGLE f/2 COUNTER
	MOVFW	MORE_FLAGS
	XORLW	B'00000010'
	MOVWF	MORE_FLAGS

	; MAKE ALARM SOUNDS HERE
	MOVF	BUZZER_COUNT,F
	BTFSS	STATUS,Z
	DECF	BUZZER_COUNT,F

	; UPDATE ALARM COUNT IF SOUNDING
	MOVFW	TICKS
	ANDLW	B'00011100'; BITS 2, 3 AND 4
	BTFSC	STATUS,Z
	GOTO	T2I4
	
	; IF ALARM TIMER HAS EXPIRED
	MOVF	BUZZER_COUNT,F
	BTFSS	STATUS,Z
	GOTO	T2I2

	; CANCEL KEYBEEP
	BCF	TICKS,KEYBEEP

	; TOGGLE BUZZER PHASE
	MOVFW	TICKS
	XORLW	B'00100000'
	MOVWF	TICKS

	MOVLW	0X00

	; RESTART ALARM COUNT IF SOUNDING
	BTFSC	TICKS,TM_ALARM_ON
	MOVLW	0XFF

	BTFSC	TICKS,CD_ALARM_ON
	MOVLW	0X80

	; KEEP BEEPING IN PHASE WITH HALF SECONDS
	BTFSC	TICKS,TICKS_HSECOND
	MOVLW	0X00

	MOVWF	BUZZER_COUNT

T2I2
	; SOUND CONTINUOSLY IF KEYBEEP
	BTFSC	TICKS,KEYBEEP
	GOTO	T2I5

	; SOUND ALARM IF IN PHASE
	BTFSC	TICKS,BUZZER_PHASE
	GOTO	T2I4

	; AND ON EACH HALF SECOND
	BTFSC	TICKS,TICKS_HSECOND
	GOTO	T2I4

T2I5
	; TOGGLE BUZZER

	; NORMAL SOUND?
	BTFSS	MORE_FLAGS,TICKING
	GOTO	T2I6

	; HALF FREQUENCY?
	BTFSS	MORE_FLAGS,ALARM_TONE
	GOTO	T2I6
	BTFSS	MORE_FLAGS,TONE_TOG
	GOTO	T2I6

	; DON'T TOGGLE BUZZER
	GOTO	T2I4
	;

T2I6

	BTFSS	TICKS,TICKS_BUZZER
	GOTO	T2I3
	BUZZER_OFF
	BCF		TICKS,TICKS_BUZZER
	GOTO	T2I4
T2I3
	BUZZER_ON
	BSF		TICKS,TICKS_BUZZER

T2I4
	
	RETURN
